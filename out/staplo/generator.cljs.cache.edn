;; Analyzed by ClojureScript 0.0-2755
{:defs {generate-ops {:protocol-inline nil, :name staplo.generator/generate-ops, :variadic false, :file "src/staplo/generator.cljs", :end-column 20, :method-params ([start-text steps operations-config]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 3}), :line 58, :end-line 58, :max-fixed-arity 3, :fn-var true, :arglists (quote ([start-text steps operations-config])), :test true}, same-char? {:protocol-inline nil, :name staplo.generator/same-char?, :variadic false, :file "src/staplo/generator.cljs", :end-column 18, :method-params ([string]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 19, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists (quote ([string])), :test true}, accumulate {:protocol-inline nil, :name staplo.generator/accumulate, :variadic false, :file "src/staplo/generator.cljs", :end-column 18, :method-params ([fun base times]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 3}), :line 13, :end-line 13, :max-fixed-arity 3, :fn-var true, :arglists (quote ([fun base times])), :test true}, generate-number {:file "src/staplo/generator.cljs", :line 36, :column 1, :end-line 36, :end-column 22, :test true, :name staplo.generator/generate-number}, generate-op {:protocol-inline nil, :name staplo.generator/generate-op, :variadic false, :file "src/staplo/generator.cljs", :end-column 19, :method-params ([operations operation-names text op-history text-history]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 5}), :line 44, :end-line 44, :max-fixed-arity 5, :fn-var true, :arglists (quote ([operations operation-names text op-history text-history])), :test true}, rand2 {:protocol-inline nil, :name staplo.generator/rand2, :variadic false, :file "src/staplo/generator.cljs", :end-column 13, :method-params ([start end]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag number, :variadic false, :max-fixed-arity 2}), :line 6, :end-line 6, :max-fixed-arity 2, :fn-var true, :arglists (quote ([start end])), :test true}, generate-challenge {:protocol-inline nil, :name staplo.generator/generate-challenge, :variadic false, :file "src/staplo/generator.cljs", :end-column 26, :method-params ([config]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 1}), :line 77, :end-line 77, :max-fixed-arity 1, :fn-var true, :arglists (quote ([config])), :test true}, generate-string {:protocol-inline nil, :name staplo.generator/generate-string, :variadic false, :file "src/staplo/generator.cljs", :end-column 23, :method-params ([interval]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([interval])), :test true}, rand-interval {:protocol-inline nil, :name staplo.generator/rand-interval, :variadic false, :file "src/staplo/generator.cljs", :end-column 21, :method-params ([p__26367]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag number, :variadic false, :max-fixed-arity 1}), :line 9, :end-line 9, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [start end]}])), :test true}, generate-start {:protocol-inline nil, :name staplo.generator/generate-start, :variadic false, :file "src/staplo/generator.cljs", :end-column 22, :method-params ([type length]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 38, :end-line 38, :max-fixed-arity 2, :fn-var true, :arglists (quote ([type length])), :test true}}, :name staplo.generator, :doc nil, :excludes #{}, :use-macros nil, :require-macros nil, :uses nil, :requires {operations staplo.operations, staplo.operations staplo.operations, clojure.string clojure.string, str clojure.string}, :imports nil}