;; Analyzed by ClojureScript 0.0-2755
{:defs {generate-challenge {:protocol-inline nil, :name staplo.generator/generate-challenge, :variadic false, :file "src/staplo/generator.cljs", :end-column 26, :method-params ([config]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 1}), :line 75, :end-line 75, :max-fixed-arity 1, :fn-var true, :arglists (quote ([config])), :test true}, generate-ops {:protocol-inline nil, :name staplo.generator/generate-ops, :variadic false, :file "src/staplo/generator.cljs", :end-column 20, :method-params ([start-text steps operations-config]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 3}), :line 56, :end-line 56, :max-fixed-arity 3, :fn-var true, :arglists (quote ([start-text steps operations-config])), :test true}, generate-op {:protocol-inline nil, :name staplo.generator/generate-op, :variadic false, :file "src/staplo/generator.cljs", :end-column 19, :method-params ([operations operation-names text op-history text-history]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 5}), :line 42, :end-line 42, :max-fixed-arity 5, :fn-var true, :arglists (quote ([operations operation-names text op-history text-history])), :test true}, generate-start {:protocol-inline nil, :name staplo.generator/generate-start, :variadic false, :file "src/staplo/generator.cljs", :end-column 22, :method-params ([type length]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 38, :end-line 38, :max-fixed-arity 2, :fn-var true, :arglists (quote ([type length])), :test true}, generators {:file "src/staplo/generator.cljs", :line 32, :column 1, :end-line 32, :end-column 17, :test true, :name staplo.generator/generators}, generate-stack {:protocol-inline nil, :name staplo.generator/generate-stack, :variadic false, :file "src/staplo/generator.cljs", :end-column 22, :method-params ([interval]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :line 26, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([interval])), :test true}, generate-number {:file "src/staplo/generator.cljs", :line 24, :column 1, :end-line 24, :end-column 22, :test true, :name staplo.generator/generate-number}, generate-string {:protocol-inline nil, :name staplo.generator/generate-string, :variadic false, :file "src/staplo/generator.cljs", :end-column 23, :method-params ([interval]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :line 10, :end-line 10, :max-fixed-arity 1, :fn-var true, :arglists (quote ([interval])), :test true}, same-char? {:protocol-inline nil, :name staplo.generator/same-char?, :variadic false, :file "src/staplo/generator.cljs", :end-column 18, :method-params ([string]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([string])), :test true}}, :name staplo.generator, :doc nil, :excludes #{}, :use-macros nil, :require-macros nil, :uses {accumulate staplo.common, rand2 staplo.common, rand-interval staplo.common}, :requires {staplo.common staplo.common, operations staplo.operations, staplo.operations staplo.operations, clojure.string clojure.string, str clojure.string}, :imports nil}