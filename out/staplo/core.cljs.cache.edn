;; Analyzed by ClojureScript 0.0-2755
{:defs {target {:file "src/staplo/core.cljs", :line 14, :column 1, :end-line 14, :end-column 13, :test true, :name staplo.core/target}, query {:protocol-inline nil, :name staplo.core/query, :variadic false, :file "src/staplo/core.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 0}), :line 79, :end-line 79, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, pop-state! {:protocol-inline nil, :name staplo.core/pop-state!, :variadic false, :file "src/staplo/core.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any clj-nil}, :variadic false, :max-fixed-arity 0}), :line 22, :end-line 22, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, current-level {:file "src/staplo/core.cljs", :line 16, :column 1, :end-line 16, :end-column 20, :test true, :name staplo.core/current-level}, win {:protocol-inline nil, :name staplo.core/win, :variadic false, :file "src/staplo/core.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 54, :end-line 54, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, check-win {:protocol-inline nil, :name staplo.core/check-win, :variadic false, :file "src/staplo/core.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 0}), :line 67, :end-line 67, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, can-pop-state? {:protocol-inline nil, :name staplo.core/can-pop-state?, :variadic false, :file "src/staplo/core.cljs", :end-column 22, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 0}), :line 26, :end-line 26, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, win-condition? {:protocol-inline nil, :name staplo.core/win-condition?, :variadic false, :file "src/staplo/core.cljs", :end-column 22, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 0}), :line 64, :end-line 64, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, clicked-on {:protocol-inline nil, :name staplo.core/clicked-on, :variadic false, :file "src/staplo/core.cljs", :end-column 18, :method-params ([op-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 1}), :line 70, :end-line 70, :max-fixed-arity 1, :fn-var true, :arglists (quote ([op-name])), :test true}, set-start! {:protocol-inline nil, :name staplo.core/set-start!, :variadic false, :file "src/staplo/core.cljs", :end-column 18, :method-params ([text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 29, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([text])), :test true}, state {:file "src/staplo/core.cljs", :line 12, :column 1, :end-line 12, :end-column 12, :test true, :name staplo.core/state}, next-level {:protocol-inline nil, :name staplo.core/next-level, :variadic false, :file "src/staplo/core.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 47, :end-line 47, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, update-display! {:protocol-inline nil, :name staplo.core/update-display!, :variadic false, :file "src/staplo/core.cljs", :end-column 23, :method-params ([id value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 2}), :line 34, :end-line 34, :max-fixed-arity 2, :fn-var true, :arglists (quote ([id value])), :test true}, get-current {:protocol-inline nil, :name staplo.core/get-current, :variadic false, :file "src/staplo/core.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 0}), :line 32, :end-line 32, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, push-state! {:protocol-inline nil, :name staplo.core/push-state!, :variadic false, :file "src/staplo/core.cljs", :end-column 19, :method-params ([text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :line 19, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists (quote ([text])), :test true}, init-current-target {:protocol-inline nil, :name staplo.core/init-current-target, :variadic false, :file "src/staplo/core.cljs", :end-column 27, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 84, :end-line 84, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}}, :name staplo.core, :doc nil, :excludes #{}, :use-macros nil, :require-macros nil, :uses nil, :requires {operations staplo.operations, staplo.operations staplo.operations, levels staplo.levels, staplo.levels staplo.levels, html staplo.html, staplo.html staplo.html, staplo.generator staplo.generator, generator staplo.generator}, :imports nil}